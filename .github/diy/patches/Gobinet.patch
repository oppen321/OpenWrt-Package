--- a/quectel_Gobinet/src/GobiUSBNet.c
+++ b/quectel_Gobinet/src/GobiUSBNet.c
@@ -305,8 +305,11 @@ static int bridge_arp_reply(struct net_device *net, struct sk_buff *skb, uint br
             __skb_pull(reply, skb_network_offset(reply));
             reply->ip_summed = CHECKSUM_UNNECESSARY;
             reply->pkt_type = PACKET_HOST;
-
+#if (LINUX_VERSION_CODE > KERNEL_VERSION( 6,1,0))
+            netif_rx(reply);
+#else
             netif_rx_ni(reply);
+#endif  
         }
         return 1;
     }
@@ -1537,11 +1540,6 @@ static int GobiNetDriverBind(
 
 #if 1 //def DATA_MODE_RP
     /* make MAC addr easily distinguishable from an IP header */
-    if ((pDev->net->dev_addr[0] & 0xd0) == 0x40) {
-        /*clear this bit wil make usbnet apdater named as usbX(instead if ethX)*/
-        pDev->net->dev_addr[0] |= 0x02;	/* set local assignment bit */
-        pDev->net->dev_addr[0] &= 0xbf;	/* clear "IP" bit */
-    }
     memcpy (pDev->net->dev_addr, node_id, sizeof node_id);
     pDev->net->flags &= ~(IFF_BROADCAST | IFF_MULTICAST);
     pDev->net->features |= (NETIF_F_VLAN_CHALLENGED);
@@ -3149,7 +3147,11 @@ RETURN VALUE:
 ===========================================================================*/
 static int __init GobiUSBNetModInit( void )
 {
+#if (LINUX_VERSION_CODE > KERNEL_VERSION( 6,6,0 ))  
+   gpClass = class_create("GobiQMI" );
+#else
    gpClass = class_create( THIS_MODULE, "GobiQMI" );
+#endif
    if (IS_ERR( gpClass ) == true)
    {
       DBG( "error at class_create %ld\n", PTR_ERR( gpClass ) );
