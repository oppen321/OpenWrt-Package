--- a/luci-app-opkg/htdocs/luci-static/resources/view/opkg.js
+++ b/luci-app-opkg/htdocs/luci-static/resources/view/opkg.js
@@ -184,7 +184,7 @@ function parseList(s, dest)
 			val = RegExp.$2.trim();
 		}
 		else if (pkg) {
-			dest.pkgs[pkg.name] = pkg;
+			dest.pkgs[pkg.name] = dest.pkgs[pkg.name] ? dest.pkgs[pkg.name] : pkg;
 
 			var provides = dest.providers[pkg.name] ? [] : [ pkg.name ];
 
@@ -248,7 +248,7 @@ function display(pattern)
 			var avail = packages.available.pkgs[name],
 			    inst  = packages.installed.pkgs[name];
 
-			if (!inst || !inst.installed)
+			if (!inst || !inst.installed || pkg.name.includes('kmod-') || pkg.name.includes('busybox') || pkg.name.includes('base-files'))
 				continue;
 
 			if (!avail || compareVersion(avail.version, pkg.version) <= 0)
@@ -261,6 +261,7 @@ function display(pattern)
 			btn = E('div', {
 				'class': 'btn cbi-button-positive',
 				'data-package': name,
+				'action': 'upgrade',
 				'click': handleInstall
 			}, _('Upgrade‚Ä¶'));
 		}
@@ -284,12 +285,14 @@ function display(pattern)
 				btn = E('div', {
 					'class': 'btn cbi-button-action',
 					'data-package': name,
+					'action': 'install',
 					'click': handleInstall
 				}, _('Install‚Ä¶'));
-			else if (inst.installed && inst.version != pkg.version)
+			else if (inst.installed && compareVersion(pkg.version, inst.version) > 0)
 				btn = E('div', {
 					'class': 'btn cbi-button-positive',
 					'data-package': name,
+					'action': 'upgrade',
 					'click': handleInstall
 				}, _('Upgrade‚Ä¶'));
 			else
@@ -393,6 +396,12 @@ function handleMode(ev)
 
 	currentDisplayMode = tab.getAttribute('data-mode');
 
+	if (currentDisplayMode == "updates"){
+	var filterv = document.querySelector('input[name="filter"]')
+	if ( filterv.value == "luci-app-")
+		filterv.value = ""
+	}
+
 	display(document.querySelector('input[name="filter"]').value);
 
 	ev.target.blur();
@@ -661,6 +670,7 @@ function handleReset(ev)
 function handleInstall(ev)
 {
 	var name = ev.target.getAttribute('data-package'),
+	    action = ev.target.getAttribute('action'),
 	    pkg = packages.available.pkgs[name],
 	    depcache = {},
 	    size;
@@ -786,7 +796,8 @@ function handleInstall(ev)
 						'id': 'overwrite-cb',
 						'type': 'checkbox',
 						'name': 'overwrite',
-						'disabled': isReadonlyView
+						'disabled': isReadonlyView,
+						'checked': true
 					}), ' ',
 					E('label', { 'for': 'overwrite-cb' }), ' ',
 					_('Allow overwriting conflicting package files')
@@ -800,7 +811,7 @@ function handleInstall(ev)
 			}, _('Cancel')),
 			' ',
 			E('div', {
-				'data-command': 'install',
+				'data-command': action,
 				'data-package': name,
 				'class': 'btn cbi-button-action',
 				'click': handleOpkg,
@@ -1000,7 +1011,8 @@ function handleOpkg(ev)
 
 		fs.exec_direct('/usr/libexec/opkg-call', argv, 'json').then(function(res) {
 			dlg.removeChild(dlg.lastChild);
-
+			var showModalFlag = (cmd !== 'update' && pkg) || res.stderr;
+			if (showModalFlag) {
 			if (res.stdout)
 				dlg.appendChild(E('pre', [ res.stdout ]));
 
@@ -1028,6 +1040,10 @@ function handleOpkg(ev)
 							resolveFn(res);
 					}, this, res)
 				}, _('Dismiss'))));
+			} else {
+				ui.hideModal();
+				updateLists();
+			}
 		}).catch(function(err) {
 			ui.addNotification(null, E('p', _('Unable to execute <em>opkg %s</em> command: %s').format(cmd, err)));
 			ui.hideModal();
@@ -1122,6 +1138,42 @@ return view.extend({
 	},
 
 	render: function(listData) {
+		var checkUpdateNeeded = function() {
+            return Promise.all([
+                L.resolveDefault(fs.stat('/tmp/opkg-lists'), null),
+                L.resolveDefault(fs.list('/tmp/opkg-lists'), []),
+                L.resolveDefault(fs.read('/tmp/resolv.conf.d/resolv.conf.auto'), '')
+            ]).then(function(results) {
+                var stat = results[0];
+				var files = results[1];
+                var resolvContent = results[2];
+
+				var isEmpty = files.length === 0;
+                var needUpdate = false;
+
+                if (isEmpty) {
+                    needUpdate = true;
+                } else if (stat) {
+                    var currentDate = new Date();
+                    var lastUpdateDate = new Date(stat.mtime * 1000);  // Convert seconds to milliseconds
+                    // Ê£ÄÊü•ÊòØÂê¶Âú®‰ªäÂ§©ÁöÑÈõ∂ÁÇπ‰πãÂêéÊõ¥Êñ∞Ëøá
+                    var today = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
+                    needUpdate = lastUpdateDate < today;
+                } else {
+                    needUpdate = true;
+                }
+
+                // Ê£ÄÊü• resolv.conf.auto Êñá‰ª∂ÂÜÖÂÆπ
+                var hasResolvContent = resolvContent && resolvContent.trim().length > 0;
+
+                // Âè™ÊúâÂΩìÈúÄË¶ÅÊõ¥Êñ∞‰∏î resolv.conf.auto ‰∏ç‰∏∫Á©∫Êó∂ÔºåÊâçËøîÂõû true
+                return needUpdate && hasResolvContent;
+            }).catch(function(error) {
+                console.error('Error checking update status:', error);
+                return false; // Â¶ÇÊûúÂá∫ÈîôÔºå‰∏çÊâßË°åÊõ¥Êñ∞
+            });
+        };
+
 		var query = decodeURIComponent(L.toArray(location.search.match(/\bquery=([^=]+)\b/))[1] || '');
 
 		var view = E([], [
@@ -1138,7 +1190,7 @@ return view.extend({
 				E('div', {}, [
 					E('label', {}, _('Filter') + ':'),
 					E('span', { 'class': 'control-group' }, [
-						E('input', { 'type': 'text', 'name': 'filter', 'placeholder': _('Type to filter‚Ä¶'), 'value': query, 'input': handleInput }),
+						E('input', { 'type': 'text', 'name': 'filter', 'placeholder': _('Type to filter‚Ä¶'), 'value': 'luci-app-', 'input': handleInput }),
 						E('button', { 'class': 'btn cbi-button', 'click': handleReset }, [ _('Clear') ])
 					])
 				]),
@@ -1155,6 +1207,7 @@ return view.extend({
 					E('label', {}, _('Actions') + ':'), ' ',
 					E('span', { 'class': 'control-group' }, [
 						E('button', { 'class': 'btn cbi-button-positive', 'data-command': 'update', 'click': handleOpkg, 'disabled': isReadonlyView }, [ _('Update lists‚Ä¶') ]), ' ',
+						E('button', { 'class': 'btn cbi-button-negative', 'data-command': 'upgradeall', 'click': handleOpkg, 'disabled': isReadonlyView }, [ _('Upgrade all‚Ä¶') ]), ' ',
 						E('button', { 'class': 'btn cbi-button-action', 'click': handleUpload, 'disabled': isReadonlyView }, [ _('Upload Package‚Ä¶') ]), ' ',
 						E('button', { 'class': 'btn cbi-button-neutral', 'click': handleConfig }, [ _('Configure opkg‚Ä¶') ])
 					])
@@ -1240,7 +1293,17 @@ return view.extend({
 		]);
 
 		requestAnimationFrame(function() {
-			updateLists(listData)
+			updateLists(listData);
+            checkUpdateNeeded().then(function(needUpdate) {
+                if (needUpdate) {
+					setTimeout(function() {
+                    var updateButton = document.querySelector('button[data-command="update"]');
+                    if (updateButton) {
+                        updateButton.click();
+                    }
+					}, 10)
+                }
+            });
 		});
 
 		return view;

--- a/luci-app-opkg/root/usr/libexec/opkg-call
+++ b/luci-app-opkg/root/usr/libexec/opkg-call
@@ -13,7 +13,7 @@ case "$action" in
 		lists_dir=$(sed -rne 's#^lists_dir \S+ (\S+)#\1#p' /etc/opkg.conf /etc/opkg/*.conf 2>/dev/null | tail -n 1)
 		find "${lists_dir:-/usr/lib/opkg/lists}" -type f '!' -name '*.sig' | xargs -r gzip -cd
 	;;
-	install|update|remove)
+	install|update|upgrade|upgradeall|remove)
 		(
 			opkg="opkg"
 
@@ -33,10 +33,45 @@ case "$action" in
 			done
 
 			if flock -x 200; then
-				$opkg $action "$@" </dev/null >/tmp/opkg.out 2>/tmp/opkg.err
-				code=$?
-				stdout=$(cat /tmp/opkg.out)
+				if [ $action == "upgradeall" ]; then
+					opkg update </dev/null >/tmp/opkg.out 2>/tmp/opkg.err
+					code=$?
+					if [ $code == 0 ]; then
+						. /etc/profile.d/opkg.sh
+						if [[ "$(cat `opkg export au`)" ]] && lock -n /var/lock/opkg-upgrade; then
+						 opkg upgr </dev/null >>/tmp/opkg.out 2>>/tmp/opkg.err
+						 code=$?
+						 lock -u /var/lock/opkg-upgrade
+						else
+							echo "üéâ ÊâÄÊúâËΩØ‰ª∂ÂåÖÂ∑≤ÊòØÊúÄÊñ∞~" >>/tmp/opkg.out
+							code=0
+						fi
+					fi
+				else
+					$opkg $action "$@" </dev/null >/tmp/opkg.out 2>/tmp/opkg.err
+					code=$?
+				fi
+				pkgn="$(echo $@ | cut -d - -f 3-)"
+				case "$action" in
+					install|upgrade)
+					if [ "$(opkg list-installed | cut -f 1 -d ' ' | grep -w $@)" ]; then
+							rm -f /tmp/opkg.err
+							([ -f /etc/profile.d/opkg.sh ] && . /etc/profile.d/opkg.sh && opkg save) &
+					fi
+					;;
+					remove)
+						if [ ! "$(opkg list-installed | cut -f 1 -d ' ' | grep -w $@)" ]; then
+							rm -f /tmp/opkg.err
+							([ -f /etc/profile.d/opkg.sh ] && . /etc/profile.d/opkg.sh && opkg save) &
+						fi
+					;;
+				esac
 				stderr=$(cat /tmp/opkg.err)
+				[ -n "$stderr" ] || {
+					echo "üéâ Â∑≤ÂÆåÊàê, ËØ∑ÂÖ≥Èó≠Êú¨Á™óÂè£~" >>/tmp/opkg.out
+					code=0
+				}
+				stdout=$(cat /tmp/opkg.out)
 			else
 				code=255
 				stderr="Failed to acquire lock"
@@ -53,7 +88,7 @@ case "$action" in
 	;;
 	*)
 		echo "Usage: $0 {list-installed|list-available}"       >&2
-		echo "       $0 {install|upgrade|remove} pkg[ pkg...]" >&2
+		echo "       $0 {install|upgrade|upgradeall|remove} pkg[ pkg...]" >&2
 		exit 1
 	;;
 esac

--- a/luci-app-opkg/root/usr/share/rpcd/acl.d/luci-app-opkg.json
+++ b/luci-app-opkg/root/usr/share/rpcd/acl.d/luci-app-opkg.json
@@ -9,6 +9,7 @@
 				"/usr/libexec/opkg-call list-installed": [ "exec" ],
 				"/usr/libexec/opkg-call list-available": [ "exec" ],
 				"/etc/opkg.conf": [ "read" ],
+				"/tmp/resolv.conf.d/resolv.conf.auto": [ "read" ],
 				"/etc/opkg/*.conf": [ "read" ]
 			},
 			"ubus": {
@@ -20,6 +21,8 @@
 				"/usr/libexec/opkg-call install *": [ "exec" ],
 				"/usr/libexec/opkg-call remove *": [ "exec" ],
 				"/usr/libexec/opkg-call update *": [ "exec" ],
+				"/usr/libexec/opkg-call upgrade *": [ "exec" ],
+				"/usr/libexec/opkg-call upgradeall *": [ "exec" ],
 				"/etc/opkg.conf": [ "write" ],
 				"/etc/opkg/*.conf": [ "write" ],
 				"/tmp/upload.ipk": [ "write" ]

--- a/luci-mod-system/htdocs/luci-static/resources/view/system/flash.js
+++ b/luci-mod-system/htdocs/luci-static/resources/view/system/flash.js
@@ -261,6 +261,7 @@ return view.extend({
 					body.push(E('p', {}, E('label', { 'class': 'btn' }, [
 						opts.backup_pkgs[0], ' ', _('Include in backup a list of current installed packages at /etc/backup/installed_packages.txt')
 					])));
+					opts.backup_pkgs[0].checked = true;
 				};
 
 				var cntbtn = E('button', {
@@ -302,6 +303,10 @@ return view.extend({
 				opts.keep[0].addEventListener('change', function(ev) {
 					opts.skip_orig[0].disabled = !ev.target.checked;
 					opts.backup_pkgs[0].disabled = !ev.target.checked;
+					if (ev.target.checked == false){
+						opts.skip_orig[0].checked =false
+						opts.backup_pkgs[0].checked =false
+					}
 
 				});
 
