#!/bin/sh
(
  flock -n 200 || exit 1

  # Environment variable settings
  PATH=/usr/sbin:/sbin:/usr/bin:/bin
  export PATH

  LOGIN_TIME="$(date "+%Y-%m-%d_%H:%M:%S")"
  USERNAME="${PEERNAME}"
  PEERIP="${5}"

  USER_CONFIG="pppoe-user"
  USER_CFGID="$(uci show ${USER_CONFIG} | grep "${USERNAME}" | cut -d '.' -sf 2)"
  
  # Get user configuration
  USER_QOS="$(uci get ${USER_CONFIG}.${USER_CFGID}.qos 2>/dev/null)"
  USER_UPLOAD="$(uci get ${USER_CONFIG}.${USER_CFGID}.urate 2>/dev/null)"
  USER_DOWNLOAD="$(uci get ${USER_CONFIG}.${USER_CFGID}.drate 2>/dev/null)"
  USER_UNIT="$(uci get ${USER_CONFIG}.${USER_CFGID}.unit 2>/dev/null)"

  # Ensure that the obtained values are valid
  if [ -z "${USER_QOS}" ] || [ -z "${USER_UPLOAD}" ] || [ -z "${USER_DOWNLOAD}" ] || [ -z "${USER_UNIT}" ]; then
      logger "${LOGIN_TIME} ERROR: Failed to get user config for ${USERNAME} (${PEERIP})"
      exit 1
  fi

  UP="upload"
  DOWN="download"

  # Add traffic control rules
  if [ "${USER_QOS}" = "1" ]; then
      nft insert rule inet pppoe ${UP} ip saddr "${PEERIP}" limit rate over "${USER_UPLOAD}" "${USER_UNIT}"/second counter drop || {
          logger "${LOGIN_TIME} ERROR: Invalid upload speed limit for IP ${PEERIP}"
          exit 1
      }
      nft insert rule inet pppoe ${DOWN} ip daddr "${PEERIP}" limit rate over "${USER_DOWNLOAD}" "${USER_UNIT}"/second counter drop || {
          logger "${LOGIN_TIME} ERROR: Invalid download speed limit for IP ${PEERIP}"
          exit 1
      }
  fi

  exit 0

) 200>/var/lock/ipup.lock
